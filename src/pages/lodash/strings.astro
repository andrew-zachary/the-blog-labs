---
import Base from "../../layouts/base.astro";

import Title from "../../components/title.astro";
import ApplyLodashBtn from "../../components/apply-lodash-btn.astro";
import ContainerCenterScroll from "../../components/container-center-scroll.astro";

const items = [
    {
        label: 'upperCase', 
        name: 'upper case', 
        description: '<strong>upperCase(str)</strong> it will transform the text into uppercase. Also, it will split the text by a separator like <strong>"uppercase char"</strong>, <strong>"_"</strong>, <strong>"*"</strong> before transformation for example: <strong>"ThisIsText"</strong> or <strong>"this_is_text"</strong> or <strong>"this*is*text"</strong> will split and transform it into <strong>"THIS IS TEXT"</strong>.'
    },
    {
        label: 'lowerCase', 
        name: 'lower case',
        description: '<strong>lowerCase(str)</strong> it will transform the text into lowercase. Also, it will split the text by a separator like <strong>"uppercase char"</strong>, <strong>"_"</strong>, <strong>"*"</strong> before transformation for example: <strong>"ThisIsText"</strong> or <strong>"THIS_IS_TEXT"</strong> or <strong>"THIS*IS*TEXT"</strong> will split and transform it into <strong>"this is text"</strong>.'
    },
    {
        label: 'upperFirst', 
        name: 'upper first',
        description: '<strong>upperFirst(str)</strong> it will transform the first char of a paragraph into uppercase.'
    },
    {
        label: 'lowerFirst', 
        name: 'lower first',
        description: '<strong>lowerFirst(str)</strong> it will transform the first char of a paragraph into lowercase.'
    },
    {
        label: 'capitalize', 
        name: 'capitalize',
        description: '<strong>capitalize(str)</strong> it will transform the first char of a paragraph into uppercase, it will also transform the rest of the paragraph into lowercase.'
    },
    {
        label: 'startCase', 
        name: 'start case',
        description: '<strong>startCase(str)</strong> it will transform the first char of every word within a paragraph into uppercase. Also, it will split the text by a separator like <strong>"uppercase char"</strong>, <strong>"_"</strong>, <strong>"*"</strong> before transformation for example: <strong>"ThisIsText"</strong> or <strong>"this_is_text"</strong> or <strong>"this*is*text"</strong> will split and transform it into <strong>"THIS IS TEXT"</strong>.'
    },
    {
        label: 'pad', 
        name: 'pad 16 with "-"',
        description: '<strong>pad(str, length, char)</strong> it will pad a string on the left and right sides for example with char "-" in total length "16", as total length including the original string itself but no effect if the original string\'s length is greater than the padding length.'
    },
    {
        label: 'padStart', 
        name: 'start pad 16 with "-"',
        description: '<strong>padStart(str, length, char)</strong> it will pad a string at start for example with char "-" in total length "16", as total length including the original string itself but no effect if the original string\'s length is greater than the padding length.'
    },
    {
        label: 'padEnd', 
        name: 'end pad 16 with "-"',
        description: '<strong>padEnd(str, length, char)</strong> it will pad a string at end for example with char "-" in total length "16", as total length including the original string itself but no effect if the original string\'s length is greater than the padding length.'
    },
    {
        label: 'trim', 
        name: 'trim char "-"',
        description: '<strong>trim(str, char)</strong> it will remove whitespace <strong>by default</strong> at the start and the end of a string but it can target a char to remove for example "-".'
    },
    {
        label: 'trimStart', 
        name: 'trim start char "-"',
        description: '<strong>trimStart(str, char)</strong> it will remove whitespace <strong>by default</strong> at the start of a string but it can target a char to remove for example "-".'
    },
    {
        label: 'trimEnd', 
        name: 'trim end char "-"',
        description: '<strong>trimEnd(str, char)</strong> it will remove whitespace <strong>by default</strong> at the end of a string but it can target a char to remove for example "-".'
    },
    {
        label: 'camelCase', 
        name: 'camelCase',
        description: '<strong>camelCase(str)</strong> it will transform the paragraph into camelCase.'
    },
    {
        label: 'snakeCase', 
        name: 'snakeCase',
        description: '<strong>snakeCase(str)</strong> it will transform the paragraph into snakeCase.'
    },
    {
        label: 'kebabCase', 
        name: 'kebabCase',
        description: '<strong>kebabCase(str)</strong> it will transform the paragraph into kababCase.'
    },
    {
        label: 'escape',
        name: 'escape',
        description: '<strong>escape(str)</strong> it will convert "&", "<", ">", \'"\', \"\'\" to HTML character entity.'
    },
    {
        label: 'repeat',
        name: 'repeat "-" 16',
        description: '<strong>repeat(str, number)</strong> it will repeat a string number of times for example repeat <strong>"your input"</strong> 16 times.'
    },
    {
        label: 'truncate',
        name: 'truncate',
        description: '<strong>truncate(str, {length, omission, separator})</strong> it will truncate string within a specific length including omission chars and will use omission char "." by default.'
    }
];
---
<script>
    import alpine from 'alpinejs';
    import {
        upperCase, 
        lowerCase,
        upperFirst, 
        lowerFirst,
        capitalize,
        startCase,
        pad,
        padStart,
        padEnd,
        trim,
        trimStart,
        trimEnd,
        camelCase,
        snakeCase,
        kebabCase,
        escape,
        repeat,
        truncate
    } from 'lodash-es';

    alpine.data('lodashOutput', () => {

        const mainContainer = document.querySelector('#mainContainer');

        return {
            currentUtil: '',
            showCopyOutput: false,
            description: '...',
            copyOutput() {
                this.$refs.lodashInput.value = this.$refs.outputFrame.innerHTML;
            },
            applyLodash(item) {

                let text = '';

                switch (item.label) {
                    case 'upperCase':
                        text = upperCase(this.$refs.lodashInput.value);
                        break;
                    case 'lowerCase':
                        text = lowerCase(this.$refs.lodashInput.value);
                        break;
                    case 'upperFirst':
                        text = upperFirst(this.$refs.lodashInput.value);
                        break;
                    case 'lowerFirst':
                        text = lowerFirst(this.$refs.lodashInput.value);
                        break;
                    case 'capitalize':
                        text = capitalize(this.$refs.lodashInput.value);
                        break;
                    case 'startCase':
                        text = startCase(this.$refs.lodashInput.value);
                        break;
                    case 'pad':
                        text = pad(this.$refs.lodashInput.value, 16, '-');
                        break;
                    case 'padStart':
                        text = padStart(this.$refs.lodashInput.value, 16, '-');
                        break;
                    case 'padEnd':
                        text = padEnd(this.$refs.lodashInput.value, 16, '-');
                        break;
                    case 'trim':
                        text = trim(this.$refs.lodashInput.value, '-');
                        break;
                    case 'trimStart':
                        text = trimStart(this.$refs.lodashInput.value, '-');
                        break;
                    case 'trimEnd':
                        text = trimEnd(this.$refs.lodashInput.value, '-');
                        break;
                    case 'camelCase':
                        text = camelCase(this.$refs.lodashInput.value);
                        break;
                    case 'snakeCase':
                        text = snakeCase(this.$refs.lodashInput.value);
                        break;
                    case 'kebabCase':
                        text = kebabCase(this.$refs.lodashInput.value);
                        break;
                    case 'escape':
                        text = escape(this.$refs.lodashInput.value);
                        break;
                    case 'repeat':
                        text = repeat(this.$refs.lodashInput.value, 16);
                        break;
                    case 'truncate':
                        text = truncate(this.$refs.lodashInput.value, {length:10});
                        break;

                    default:
                        break;
                }

                mainContainer.scroll({top:0, behavior: 'smooth'});
                this.currentUtil = item.label;
                this.$refs.outputFrame.innerText = text;
                this.showCopyOutput = this.$refs.outputFrame.innerText.length > 0;
                this.description = item.description;
            }
        }
        
    })

    alpine.start();
</script>
<style lang="scss" is:global>
    #outputFrame {
        max-height: 3rem;
    }
    #str-ctrls {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(max-content, 20rem));
        justify-content: center;
    }
</style>
<Base>
    <Title>own strings with lodash</Title>
    <ContainerCenterScroll>
        <section class="w-full max-w-md mx-auto pt-40 pb-8 px-2 text-center" x-data="lodashOutput">
            <h1 id="outputFrame" class="text-5xl font-ssp font-bold my-8 overflow-hidden" x-ref="outputFrame"></h1>
            <div>
                <button type="button" class="text-3xl" x-show="showCopyOutput" @click="copyOutput">copy output</button>
            </div>
            <p class="px-2 my-8 font-ssp text-4xl text-left leading-normal" x-html="description"></p>
            <input type="text" class="w-full p-4 my-8 text-4xl border border-black rounded-2xl" placeholder="type some text" x-ref="lodashInput" />
            <ul id="str-ctrls" class="w-full">
                {items.map(item => {
                    return <li class="flex justify-center p-2">
                        <ApplyLodashBtn type="button" item={item}>{item.name}</ApplyLodashBtn>
                    </li>
                })}
            </ul>
        </section>
    </ContainerCenterScroll>
</Base>