---
import Base from "../../layouts/base.astro";

import Title from "../../components/astro/title.astro";
import ApplyLodashBtn from "../../components/astro/apply-lodash-btn.astro";
import ContainerCenterScroll from "../../components/astro/container-center-scroll.astro";

const items = [
    {
        label: 'invertBy', 
        name: 'invertBy', 
        description: '<strong>invertBy(object, callback?)</strong> it will switch keys for their values and group the new keys by a unique name based on a value for example: <pre>{"item1": 1, "item2": 2, "item3": 3}</pre> will be inverted to:<pre>{"1":["item1"],"2":["item2","item3"]}</pre>',
    },
    {
        label: 'keys', 
        name: 'keys', 
        description: '<strong>keys(object)</strong> it will return all keys of an object as array.',
    },
    {
        label: 'values', 
        name: 'values', 
        description: '<strong>values(object)</strong> it will return all values of an object as array.',
    },
    {
        label: 'toPairs', 
        name: 'toPairs', 
        description: '<strong>toPairs(object)</strong> it will pair a key and it\'s value into an array.',
    },
    {
        label: 'mapKeys', 
        name: 'mapKeys append x', 
        description: '<strong>mapKeys(object, callback)</strong> it will map the names of all keys to a new names for example: <pre>mapKeys({"item1":1, "item2":2, "item3":3}, (value, key) => key + \'x\')</pre> will append char <strong>x</strong> to all keys names.',
    },
    {
        label: 'transform', 
        name: 'transform append x', 
        description: '<strong>transform(object, callback)</strong> it will transform the values of all keys to a new value for example: <pre>transform({"item1":1, "item2":2, "item3":3}, (obj, v, i) => obj[i] = v + \'x\')</pre> will append char <strong>x</strong> to all values.',
    },
    {
        label: 'omitBy', 
        name: 'omitBy null', 
        description: '<strong>omitBy(object, callback)</strong> it will omit keys with a specific value, for example: will omit keys with a null value.<pre>omitBy({"item1":1, "item2":null, "item3":3}, i => i === null)</pre> will result: <pre>{"item1":1, "item3":3}</pre>',
    },
    {
        label: 'pickBy', 
        name: 'pickBy > 1', 
        description: '<strong>pickBy(object, callback)</strong> it will pick keys with a specific value, for example: will pick keys with a value greater than 1.<pre>pickBy({"item1":1, "item2":2, "item3":3}, i => i > 1)</pre> will result: <pre>{"item2":2, "item3":3}</pre>',
    }
];
---
<script>
    import alpine from 'alpinejs';
    import {
        invertBy,
        keys,
        values,
        toPairs,
        mapKeys,
        omitBy,
        pickBy,
        transform
    } from 'lodash-es';

    alpine.data('lodashOutput', () => {

        const mainContainer = document.querySelector('#main-container');

        return {
            currentUtil: '',
            showCopyOutput: false,
            description: '...',
            copyOutput() {
                this.$refs.lodashInput.value = this.$refs.outputFrame.innerHTML;
            },
            applyLodash(item) {

                this.description = item.description;
                this.currentUtil = item.label;

                let text = '';

                if(this.$refs.lodashInput.value < 1) return;

                let object1 = JSON.parse(this.$refs.lodashInput.value);

                switch (item.label) {
                    case 'invertBy':
                        text = invertBy(object1);
                        break;
                    case 'keys':
                        text = keys(object1);
                        break;
                    case 'values':
                        text = values(object1);
                        break;
                    case 'toPairs':
                        text = toPairs(object1);
                        break;
                    case 'mapKeys':
                        text = mapKeys(object1, (value, key) => key + 'x');
                        break;
                    case 'transform':
                        text = transform(object1, (obj, v, i) => obj[i] = v + 'x');
                        break;
                    case 'omitBy':
                        text = omitBy(object1, i => i === null);
                        break;
                    case 'pickBy':
                        text = pickBy(object1, i => i > 1);
                        break;

                    default:
                        break;
                }

                mainContainer.scroll({top:0, behavior: 'smooth'});
                this.$refs.outputFrame.innerText = JSON.stringify(text);
                this.showCopyOutput = this.$refs.outputFrame.innerText.length > 0;
            }
        }
        
    })

    alpine.start();
</script>
<style lang="scss" is:global>
    #outputFrame {
        max-height: 3rem;
    }
    #str-ctrls {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(max-content, 20rem));
        justify-content: center;
    }
    pre {
        overflow-x: auto;
    }
</style>
<Base>
    <Title>own objects with lodash</Title>
    <ContainerCenterScroll>
        <section class="w-full max-w-md mx-auto pt-40 pb-8 px-2 text-center" x-data="lodashOutput">
            <h1 id="outputFrame" class="text-5xl font-ssp font-bold my-8 overflow-hidden" x-ref="outputFrame"></h1>
            <div>
                <button type="button" class="text-3xl" x-show="showCopyOutput" @click="copyOutput">use output</button>
            </div>
            <p class="px-2 my-8 font-ssp text-4xl text-left leading-normal" x-html="description"></p>
            <input type="text" class="w-full p-4 my-8 text-4xl border border-black rounded-2xl" placeholder="enter a valid json object" x-ref="lodashInput" />
            <ul id="str-ctrls" class="w-full">
                {items.map(item => {
                    return <li class="flex justify-center p-2">
                        <ApplyLodashBtn type="button" item={item}>{item.name}</ApplyLodashBtn>
                    </li>
                })}
            </ul>
        </section>
    </ContainerCenterScroll>
</Base>